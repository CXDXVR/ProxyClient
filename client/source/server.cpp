#include "global.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Server::Stop()
{
	for (const auto& [id, session] : m_Sessions)
		session->Stop();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Server::AddSession(_In_ std::shared_ptr<AbstractSession> session)
{
	if (SessionExists(session->GetId()) && m_Sessions[session->GetId()]->IsActive())
		return false;

	m_Sessions[session->GetId()] = session;
	return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Server::UpdateConfig(_In_ const BaseConfigManager::Config& config)
{
	for (const auto& [id, session] : m_Sessions)
		session->UpdateConfig(config);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Server::Wait(_In_opt_ DWORD timeout)
{
	auto handles = std::vector<HANDLE>();

	for (const auto& [id, session] : m_Sessions)
		handles.push_back(session->GetStopEvent().get());

	WaitForMultipleObjects(handles.size(), handles.data(), TRUE, timeout);
}
